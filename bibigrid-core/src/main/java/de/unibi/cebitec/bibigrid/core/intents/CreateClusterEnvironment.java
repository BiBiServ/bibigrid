package de.unibi.cebitec.bibigrid.core.intents;

import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.KeyPair;
import de.unibi.cebitec.bibigrid.core.model.Client;
import de.unibi.cebitec.bibigrid.core.model.Configuration;
import de.unibi.cebitec.bibigrid.core.model.Network;
import de.unibi.cebitec.bibigrid.core.model.Subnet;
import de.unibi.cebitec.bibigrid.core.model.exceptions.ConfigurationException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.ByteArrayOutputStream;

import static de.unibi.cebitec.bibigrid.core.util.VerboseOutputFilter.V;

/**
 * @author Johannes Steiner - jsteiner(at)cebitec.uni-bielefeld.de
 */
public abstract class CreateClusterEnvironment {
    private static final Logger LOG = LoggerFactory.getLogger(CreateClusterEnvironment.class);
    public static final String SECURITY_GROUP_PREFIX = CreateCluster.PREFIX + "sg-";
    public static final String NETWORK_PREFIX = CreateCluster.PREFIX + "net-";
    public static final String SUBNET_PREFIX = CreateCluster.PREFIX + "subnet-";

    protected final Client client;
    protected final CreateCluster cluster;

    protected Subnet subnet;
    protected Network network;

    protected CreateClusterEnvironment(Client client, CreateCluster cluster) throws ConfigurationException {
        this.client = client;
        this.cluster = cluster;
        // create a new clusterKeyPair
        try {
            Configuration config = cluster.getConfig();
            Configuration.ClusterKeyPair clusterKeyPair = cluster.getConfig().getClusterKeyPair();
            JSch ssh = new JSch();
            KeyPair keypair = KeyPair.genKeyPair(ssh, KeyPair.RSA,4096);
            ByteArrayOutputStream bao = new ByteArrayOutputStream();
            keypair.writePrivateKey(bao);
            clusterKeyPair.setPrivateKey(bao.toString());
            bao = new ByteArrayOutputStream();
            keypair.writePublicKey(bao, "generated by BiBiGrid");
            clusterKeyPair.setPublicKey(bao.toString());
            clusterKeyPair.setName(CreateCluster.PREFIX+cluster.clusterId);
            clusterKeyPair.store();
        } catch (Exception ex) {
            if (Configuration.DEBUG) {
                ex.printStackTrace();
            }
            throw new ConfigurationException(ex.getMessage());
        }

    }

    /**
     * Api specific implementation of creating or choosing an existing Network.
     *
     * @throws ConfigurationException Throws an exception if the creation of the network failed.
     */
    public CreateClusterEnvironment createNetwork() throws ConfigurationException {
        String networkName = getConfig().getNetwork();
        if (networkName != null && networkName.length() > 0) {
            network = client.getNetworkByName(networkName);
            // If the network could not be found, try if the user provided a network id instead of the name.
            if (network == null) {
                network = client.getNetworkById(networkName);
            }
            if (network == null) {
                throw new ConfigurationException("No network with name or id '" + networkName + "' found!");
            }
        } else {
            network = client.getDefaultNetwork();
            if (network == null) {
                LOG.warn("Failed to get default network. Trying to create new one...");
                // TODO: network = client.createNetwork(NETWORK_PREFIX + cluster.getClusterId());
                if (network == null) {
                    throw new ConfigurationException("Failed to create network!");
                }
            }
        }
        if (network.getCidr() != null) {
            LOG.info(V, "Using network '{}' with name '{}' and CIDR '{}'.", network.getId(), network.getName(), network.getCidr());
        } else {
            LOG.info(V, "Using Network '{}' with name '{}'.", network.getId(), network.getName());
        }
        return this;
    }

    /**
     * Api specific implementation of creating or choosing a Subnet.
     *
     * @throws ConfigurationException Throws an exception if the creation of the subnet failed.
     */
    public abstract CreateClusterEnvironment createSubnet() throws ConfigurationException;

    /**
     * Api specific implementation of creating or choosing a SecurityGroup.
     *
     * @throws ConfigurationException Throws an exception if the creation of the security group failed.
     */
    public abstract CreateClusterEnvironment createSecurityGroup() throws ConfigurationException;


    /**
     * Api specific implementation of creating or choosing a KeyPair.
     *
     * @return
     * @throws ConfigurationException
     */
    public abstract CreateClusterEnvironment createKeyPair() throws ConfigurationException;


    /**
     * Api specific implementation of creating or choosing a placement group.
     * Needs to be the <b>LAST</b> Environment configuration and returns an
     * CreateCluster implementing Instance to step to instance configuration.
     *
     * @throws ConfigurationException Throws an exception if the creation of the placement group failed.
     */
    public CreateClusterEnvironment createPlacementGroup() throws ConfigurationException {
        return this;
    }

    protected Configuration getConfig() {
        return cluster.getConfig();
    }

    public final Network getNetwork() {
        return network;
    }

    public final Subnet getSubnet() {
        return subnet;
    }
}
